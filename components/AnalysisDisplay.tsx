
import React from 'react';
import { AnalysisResult, ConditionReport } from '../types';

interface AnalysisDisplayProps {
  result: AnalysisResult;
  onReset: () => void;
}

const getRiskColorClasses = (riskLevel: ConditionReport['riskLevel']) => {
  switch (riskLevel) {
    case 'High':
      return 'bg-red-100 text-red-800 border-red-500';
    case 'Medium':
      return 'bg-yellow-100 text-yellow-800 border-yellow-500';
    case 'Low':
      return 'bg-blue-100 text-blue-800 border-blue-500';
    default:
      return 'bg-green-100 text-green-800 border-green-500';
  }
};

const Disclaimer: React.FC = () => (
    <div className="mt-8 p-4 bg-gray-100 border-l-4 border-gray-500 text-gray-700 rounded-r-lg">
        <h3 className="font-bold">Important Disclaimer</h3>
        <p>This analysis is generated by an AI model and is for informational purposes only. It is not a medical diagnosis. Please consult with a qualified healthcare professional for any health concerns or before making any medical decisions.</p>
    </div>
);


const ConditionCard: React.FC<{ report: ConditionReport }> = ({ report }) => (
    <div className="bg-white border border-gray-200 rounded-lg p-6 shadow-sm transition-shadow hover:shadow-md">
        <div className="flex justify-between items-start mb-3">
            <h3 className="text-xl font-semibold text-gray-800">{report.conditionName}</h3>
            <span className={`px-3 py-1 text-sm font-bold rounded-full border ${getRiskColorClasses(report.riskLevel)}`}>
                {report.riskLevel} Risk
            </span>
        </div>
        <p className="text-gray-600 mb-4">{report.explanation}</p>
        {report.symptoms.length > 0 && (
            <div>
                <h4 className="font-semibold text-gray-700 mb-2">Potential Vocal Indicators Detected:</h4>
                <ul className="list-disc list-inside space-y-1">
                    {report.symptoms.map((symptom, index) => (
                        <li key={index} className="text-gray-600">{symptom}</li>
                    ))}
                </ul>
            </div>
        )}
    </div>
);

const AnalysisDisplay: React.FC<AnalysisDisplayProps> = ({ result, onReset }) => {
  return (
    <div className="animate-fade-in">
        <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-800">Analysis Complete</h2>
            <p className="text-lg text-gray-600 mt-2">{result.summary}</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {result.conditions.map((report) => (
                <ConditionCard key={report.conditionName} report={report} />
            ))}
        </div>
        
        <Disclaimer />

        <div className="mt-10 text-center">
             <button 
                onClick={onReset}
                className="px-8 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200"
             >
                Run Another Analysis
            </button>
        </div>
    </div>
  );
};

export default AnalysisDisplay;
